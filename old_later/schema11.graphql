# This "Book" type defines the queryable fields for every book in our data source.
type Book {
    title: String
    author: String
}

# The "Query" type is special: 
# it lists all of the available queries that
# clients can execute, along with the return type for each. 
# In this case, the "books12" query returns an array of zero or more Books
type Query {
    books12: [Book]
    greeting: String
    students: [Student23]
    studentById(id:ID!): Student23
    sayHello(name:String!):String
    spanishWishes (name:String!): String
}

type Mutation {
    #... this returns a string --> which is newly created studentId
    createStudent12(collegeId:ID,firstName:String,lastName:String):String

    #... But we want to return the whole Object... to verify that all details got inserted
    createStudent13(collegeId143:ID,firstName:String,lastName:String, email:String):Student23

    signUp(input:SignUpInput):String
}

#... these are interfaces ..........................................
type College22 {
    id: ID!
    name: String
    location: String
    rating: Float
}

input SignUpInput {
    email:String!,
    password:String!,
    firstName:String!
}

type Student23 {
    id:ID!
    firstName: String
    lastName: String
    fullName: String
    password: String
    email: String
    collegeId44: College22
}
#... end of interfaces ..........................................

